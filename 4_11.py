#两线段交点
#贼难
#不能用y = kx+b因为表示不了x = c 这种和y轴平行的情况
#ax+by+c = 0可以但是很难用起始结束的点坐标来表示
#使用参数方程x = x0+t*(delta_x), y = y0 + t*(delta_y), t属于[0,1]
#此处delta_x为x2-x1
#或x = ax+(1-a)x, y = ay+(1-a)y, a属于[0,1]，若a在范围外，点不在线段上

#判断步骤:是否平行->平行，是否为同一条直线->判断在另一条线段上的端点

#(1)将两个线段的四个点(x1->x4, y1->y4)带入,解t1,t2,得到两线段不平行的解,判断t1,t2
#的范围[0,1]即可知交点在不在线上

#(2)判断线段平行，(y4-y3)(x2-x1) = (y2-y1)(x4-x3)，将原式变为乘法解决斜率无穷大问题
#当两线段平行，他们有可能是在同一直线，此时判断(x3,y3)是否在第一条直线上即可
#与判定(x3,y3),(x1,y1)这条线段与第一条线段斜率是否相等等效
#(y2-y1)(x3-x1) = (y3-y1)(x2-x1),相似的，除法变乘法解决斜率问题

#(3)最后判断每个端点是否在另外一条直线上，选择满足条件的取x最小，或y最小
#因为前提条件已经为两条线平行且共线，所以斜率相等，x,y中任意一个满足在线段的
#端点的x值之间或y值之间即可判定在线段上，即min(x1,x2)<=x3<=max(x1,x2),对于y也一样

# 判断 (xk, yk) 是否在「线段」(x1, y1)~(x2, y2) 上
        # 这里的前提是 (xk, yk) 一定在「直线」(x1, y1)~(x2, y2) 上
def intersection(self, start1, end1, start2, end2):
        def inside(x1, y1, x2, y2, xk, yk):
            # 若与 x 轴平行，只需要判断 x 的部分
            # 若与 y 轴平行，只需要判断 y 的部分
            # 若为普通线段，则都要判断
            return (x1 == x2 or min(x1, x2) <= xk <= max(x1, x2)) and (y1 == y2 or min(y1, y2) <= yk <= max(y1, y2))
        
        def update(ans, xk, yk):
            # 将一个交点与当前 ans 中的结果进行比较
            # 若更优则替换
            return [xk, yk] if not ans or [xk, yk] < ans else ans
        
        x1, y1 = start1
        x2, y2 = end1
        x3, y3 = start2
        x4, y4 = end2

        ans = list()
        # 判断 (x1, y1)~(x2, y2) 和 (x3, y3)~(x4, y3) 是否平行
        if (y4 - y3) * (x2 - x1) == (y2 - y1) * (x4 - x3):
            # 若平行，则判断 (x3, y3) 是否在「直线」(x1, y1)~(x2, y2) 上
            if (y2 - y1) * (x3 - x1) == (y3 - y1) * (x2 - x1):
                # 判断 (x3, y3) 是否在「线段」(x1, y1)~(x2, y2) 上
                if inside(x1, y1, x2, y2, x3, y3):
                    ans = update(ans, x3, y3)
                # 判断 (x4, y4) 是否在「线段」(x1, y1)~(x2, y2) 上
                if inside(x1, y1, x2, y2, x4, y4):
                    ans = update(ans, x4, y4)
                # 判断 (x1, y1) 是否在「线段」(x3, y3)~(x4, y4) 上
                if inside(x3, y3, x4, y4, x1, y1):
                    ans = update(ans, x1, y1)
                # 判断 (x2, y2) 是否在「线段」(x3, y3)~(x4, y4) 上
                if inside(x3, y3, x4, y4, x2, y2):
                    ans = update(ans, x2, y2)
            # 在平行时，其余的所有情况都不会有交点
        else:
            # 联立方程得到 t1 和 t2 的值
            t1 = (x3 * (y4 - y3) + y1 * (x4 - x3) - y3 * (x4 - x3) - x1 * (y4 - y3)) / ((x2 - x1) * (y4 - y3) - (x4 - x3) * (y2 - y1))
            t2 = (x1 * (y2 - y1) + y3 * (x2 - x1) - y1 * (x2 - x1) - x3 * (y2 - y1)) / ((x4 - x3) * (y2 - y1) - (x2 - x1) * (y4 - y3))
            # 判断 t1 和 t2 是否均在 [0, 1] 之间
            if 0.0 <= t1 <= 1.0 and 0.0 <= t2 <= 1.0:
                ans = [x1 + t1 * (x2 - x1), y1 + t1 * (y2 - y1)]

        return ans

#note:O(logn)特征为每次迭代乘或除。例如二分查找，在长度为N的序列中，每次迭代
#减少半的候选，若迭代k次找到结果，N*(1/2)^k = 1, k = O(logN)
#明天开始先不做算法题，巩固基础学leetcode上的卡片知识
